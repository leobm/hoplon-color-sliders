(page "index.html"
  (:use [app.utils :only [log rgb2hsl hsl2rgb trunc fixed2]]))

(defc rgb {
    :r 0
    :g 0
    :b 0 })

(defc hsl {
    :h 0
    :s 0
    :l 0 })

(declare r' g' b')
(declare h' s' l')

(defn _rgb [value comp]
  (dosync
    (swap! rgb assoc comp value)
    (reset! hsl (rgb2hsl @r' @g' @b'))))

(defn _hsl [value comp]
  (dosync
    (swap! hsl assoc comp value)
    (reset! rgb (hsl2rgb @h' @s' @l'))))

(defc= r' (:r rgb) #(_rgb % :r))
(defc= g' (:g rgb) #(_rgb % :g))
(defc= b' (:b rgb) #(_rgb % :b))
(defc= h' (:h hsl) #(_hsl % :h))
(defc= s' (:s hsl) #(_hsl % :s))
(defc= l' (:l hsl) #(_hsl % :l))

(defc= hexString (app.utils/hexString r' g' b'))
(defc= rgbString (app.utils/rgbString r' g' b'))
(defc= hslString (app.utils/hslString h' s' l'))

(defelem color-box [{:keys [color-fc] :as attr} _]
    (div :css (cell= {:margin "4px" :float "left" :min-width "150px" :padding "1.5em" :background-color color-fc} )
      (text "~{color-fc}")))

(defelem range-input [{:keys [lbl-text min max step value-fc is-float] :as attr} _]
  (div
    (label
      (text lbl-text))
    (input :type "range" :min min :max max :step step :value value-fc :input #(reset! value-fc @%))
    (label
      (text "~{(if (true? is-float) (fixed2 value-fc) value-fc)}"))))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body
    (form
      (range-input :lbl-text "R" :min 0 :max 255 :value-fc r')
      (range-input :lbl-text "G" :min 0 :max 255 :value-fc g')
      (range-input :lbl-text "B" :min 0 :max 255 :value-fc b')
      (range-input :lbl-text "H" :min 0 :max 360 :step 1 :value-fc h')
      (range-input :lbl-text "S" :min 0.1 :max 1 :step 0.01 :is-float true :value-fc s')
      (range-input :lbl-text "L" :min 0.1 :max 1 :step 0.01 :is-float true :value-fc l')

      (color-box :color-fc hexString)
      (color-box :color-fc rgbString)
      (color-box :color-fc hslString))))
